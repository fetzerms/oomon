dnl configure.in for oomon
dnl thanks to the ircii configure.in for giving me examples to
dnl work from and steal ;)
dnl
dnl $Id$

AC_REVISION($Revision$)dnl
AC_INIT(oomon.h)
AC_CONFIG_HEADER(defs.h)
AC_LANG_CPLUSPLUS
AC_PREFIX_DEFAULT(/usr/local/oomon)
AC_CANONICAL_HOST

dnl
dnl grok the version number - from oomon.h
dnl

VERSION=`sed -n -e 's/"$//' -e '/#define OOMON_VERSION	*"/s///p' -e '/#define OOMON_VERSION/q' < oomon.h` 
echo this is OOMon version $VERSION
echo
AC_SUBST(VERSION)

dnl
dnl initial stuff
dnl

AC_PROG_CXX
AC_PROG_CXXCPP
AC_ISC_POSIX
AC_PROG_MAKE_SET
AC_PATH_PROG(RM, rm)
AC_PATH_PROG(CP, cp)
AC_PATH_PROG(MV, mv)
AC_PATH_PROG(LN, ln)
AC_PATH_PROG(MKDIR, mkdir)
AC_PATH_PROG(TOUCH, touch)
AC_PROG_INSTALL

dnl use directory structure of cached as default (hack)
if test "$libexecdir" = '${exec_prefix}/libexec' &&
   test "$localstatedir" = '${prefix}/var'; then
        libexecdir='${bindir}'
        localstatedir='${prefix}'
fi

dnl
dnl check for NeXT.. and -bsd switch
dnl

AC_MSG_CHECKING(for NeXT)
AC_EGREP_CPP(yes,
[#if defined(NeXT) || defined(__NeXT) || defined(__NeXT__)
  yes
#endif
],nextstep=1)

if test -n "$nextstep"; then
  AC_MSG_RESULT(yes)
  CFLAGS="$CFLAGS -posix"
  LIBS="$LIBS -lposix"
else
  AC_MSG_RESULT(no)
fi

dnl AC_AIX is broken.  blah.

AC_MSG_CHECKING(for AIX)
AC_EGREP_CPP(yes,
[
#ifdef _AIX
  yes
#endif
],AC_MSG_RESULT(yes)
  aix=1
  AC_DEFINE(_ALL_SOURCE),
  AC_MSG_RESULT(no))

dnl AC_PROG_LEX
AC_PROG_GCC_TRADITIONAL
AC_CHECK_LIB(sun, getpwnam)

AC_MSG_CHECKING(for qnx)
case "$(uname -s)" in
  QNX*)
    AC_MSG_RESULT(yes)
    LDFLAGS=-N64k                  dnl 64k of stack
    CFLAGS="-w4 -O -g -fi=unix.h"  dnl better compile options
  ;;
  *)
    AC_MSG_RESULT(no)
esac

AC_MSG_CHECKING(for solaris)
if /bin/sun 2> /dev/null
then
  uname=`uname -r`
  case "$uname" in
    4.*)
      AC_MSG_RESULT(no) 
      sunos4=1
      ;;
    5.*)
      AC_MSG_RESULT(yes)
      AC_DEFINE(__solaris__, 1, [define this if you are on solaris 2.x])
      svr4=1
      ;;
  esac
else
  AC_MSG_RESULT(no)
  AC_MSG_CHECKING(for SVR4)
  AC_EGREP_CPP(yes,
[#if defined(SVR4) || defined(__svr4__)
  yes
#endif
],svr4=1)
fi

if test -n "$svr4"
then
  AC_MSG_RESULT(yes)
  LDFLAGS="-L/usr/ccs/lib $LDFLAGS"
  AC_DEFINE(SVR4, 1, [define this if you are on a svr4 derivative])
else
  if test ! -n "$sunos4"
  then
    AC_MSG_RESULT(no)
  fi
fi

dnl
dnl testing for svr3/wollengong tcp's /usr/netinclude
dnl

AC_MSG_CHECKING(for -I/usr/netinclude)
if test -d /usr/netinclude; then
  AC_MSG_RESULT(yes)
  CFLAGS="$CFLAGS -I/usr/netinclude"
else
  AC_MSG_RESULT(no)
fi
  
AC_CHECK_HEADERS(sys/un.h sys/select.h sys/fcntl.h sys/file.h sys/time.h sys/wait.h sys/twg_config.h sys/ptem.h)dnl sys/ ones
AC_CHECK_HEADERS(stdarg.h unistd.h fcntl.h string.h memory.h netdb.h limits.h crypt.h)dnl non sys/ ones
AC_CHECK_HEADERS(termbits.h)
AC_CHECK_FUNC(setsid, AC_DEFINE(HAVE_SETSID, 1, [Define if your system has a setsid() function.]),)
AC_CHECK_FUNC(getpgid, AC_DEFINE(HAVE_GETPGID, 1, [Define if your system has a getpgid() function.]),)
AC_CHECK_FUNC(getsid, AC_DEFINE(HAVE_GETSID, 1, [Define if your system has a getsid() function.]),)
AC_CHECK_FUNC(scandir, AC_DEFINE(HAVE_SCANDIR, 1, [Define if your system has a scandir() function.]),)
AC_CHECK_FUNC(memmove, AC_DEFINE(HAVE_MEMMOVE, 1, [Define if your system has a memmove() function.]),)
AC_CHECK_FUNC(uname, AC_DEFINE(HAVE_UNAME, 1, [Define if your system has a uname() function.]),)
AC_CHECK_FUNC(getcwd, AC_DEFINE(HAVE_GETCWD, 1, [Define if your system has a getcwd() function.]),)
AC_CHECK_FUNC(fchmod, AC_DEFINE(HAVE_FCHMOD, 1, [Define if your system has a fchmod() function.]),)
AC_CHECK_FUNC(strerror, AC_DEFINE(HAVE_STRERROR, 1, [Define if your system has a strerror() function.]),)
AC_CHECK_FUNC(regcomp, AC_DEFINE(HAVE_POSIX_REGEX, 1, [Define if using POSIX regular expressions.]),)
AC_CHECK_FUNC(snprintf, AC_DEFINE(HAVE_SNPRINTF, 1, [Define if your system has a snprintf() function.]),)
AC_HEADER_STDC
AC_HEADER_TIME
AC_HEADER_DIRENT
AC_TYPE_SIGNAL
AC_TYPE_MODE_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_TYPE_UID_T

dnl PCRE support
AC_MSG_CHECKING(for PCRE)
AC_ARG_ENABLE(pcre,
[  --enable-pcre[=DIR]     Enable PCRE support (DIR optional).
  --disable-pcre          Disable PCRE support.],
[cf_enable_pcre=$enableval],
[cf_enable_pcre="auto"])

if test "X$cf_enable_pcre" != "Xno" ; then
  cf_pcre_basedir=""
  if test "X$cf_enable_pcre" != "Xauto" &&
     test "X$cf_enable_pcre" != "Xyes" ; then
     dnl Support for --enable-pcre=/some/place
     cf_pcre_basedir="${cf_enable_pcre}"
  else
     dnl Do the auto-probe here.  Check some common directory paths.
     for dirs in /usr/local /usr/local/pcre /usr/pkg ; do
       if test -f "${dirs}/include/pcre.h" ; then
	 cf_pcre_basedir="$dirs"
	 break
       fi
     done
     unset dirs
  fi
  dnl Now check cf_pcre_basedir to see if we found anything.
  if test "X$cf_pcre_basedir" != "X" ; then
    if test -f "${cf_pcre_basedir}/include/pcre.h" ; then
      echo "${CXXFLAGS}" | grep -e "-I${cf_pcre_basedir}/include" > /dev/null 2>&1
      if test $? -ne 0; then
        PCRE_INCLUDES="-I${cf_pcre_basedir}/include"
      fi
      PCRE_LIBS="-lpcre"
      echo "${LIBS}" | grep -e "-L${cf_pcre_basedir}/lib" > /dev/null 2>&1
      if test $? -ne 0; then
        PCRE_LIBS="-L${cf_pcre_basedir}/lib $PCRE_LIBS"
      fi
    else
      dnl PCRE wasn't found in the directory specified.
      cf_pcre_basedir=""
    fi
  else
    dnl Check for install in /usr/include and /usr/lib.
    if test -f "/usr/include/pcre.h" ; then
      cf_pcre_basedir="/usr"
      PCRE_LIBS="-lpcre"
    fi
  fi
  dnl If we have a basedir defined, then everything is okay.  Otherwise,
  dnl we have a problem.
  if test "X$cf_pcre_basedir" != "X" ; then
    AC_MSG_RESULT(yes ($cf_pcre_basedir))
    cf_enable_pcre="yes"
  else
    AC_MSG_RESULT(not found.  Please check your path.)
    cf_enable_pcre="no"
  fi
  unset cf_pcre_basedir
else
  dnl If --disable-pcre was specified
  AC_MSG_RESULT(disabled)
fi

if test "X$cf_enable_pcre" != "Xno" ; then
  if test ! -z "$PCRE_INCLUDES"; then
    CXXFLAGS="$CXXFLAGS $PCRE_INCLUDES"
  fi
  if test ! -z "$PCRE_LIBS"; then
    LIBS="$PCRE_LIBS $LIBS"
  fi
  AC_DEFINE(HAVE_LIBPCRE, 1, [Define if using PCRE for regex.])
  PCRE_MSG="yes"
else
  PCRE_MSG="no"
fi

dnl GDBM support
AC_MSG_CHECKING(for GDBM)
AC_ARG_ENABLE(gdbm,
[  --enable-gdbm[=DIR]     Enable GDBM support (DIR optional).
  --disable-gdbm          Disable GDBM support.],
[cf_enable_gdbm=$enableval],
[cf_enable_gdbm="auto"])

if test "X$cf_enable_gdbm" != "Xno" ; then
  cf_gdbm_basedir=""
  if test "X$cf_enable_gdbm" != "Xauto" &&
     test "X$cf_enable_gdbm" != "Xyes" ; then
     dnl Support for --enable-gdbm=/some/place
     cf_gdbm_basedir="${cf_enable_gdbm}"
  else
     dnl Do the auto-probe here.  Check some common directory paths.
     for dirs in /usr/local /usr/local/gdbm /usr/pkg ; do
       if test -f "${dirs}/include/gdbm.h" ; then
	 cf_gdbm_basedir="$dirs"
	 break
       fi
     done
     unset dirs
  fi
  dnl Now check cf_gdbm_basedir to see if we found anything.
  if test "X$cf_gdbm_basedir" != "X" ; then
    if test -f "${cf_gdbm_basedir}/include/gdbm.h" ; then
      echo "${CXXFLAGS}" | grep -e "-I${cf_gdbm_basedir}/include" > /dev/null 2>&1
      if test $? -ne 0; then
        GDBM_INCLUDES="-I${cf_gdbm_basedir}/include"
      fi
      GDBM_LIBS="-lgdbm"
      echo "${LIBS}" | grep -e "-L${cf_gdbm_basedir}/lib" > /dev/null 2>&1
      if test $? -ne 0; then
        GDBM_LIBS="-L${cf_gdbm_basedir}/lib $GDBM_LIBS"
      fi
    else
      dnl GDBM wasn't found in the directory specified.
      cf_gdbm_basedir=""
    fi
  else
    dnl Check for install in /usr/include and /usr/lib.
    if test -f "/usr/include/gdbm.h" ; then
      cf_gdbm_basedir="/usr"
      GDBM_LIBS="-lgdbm"
    fi
  fi
  dnl If we have a basedir defined, then everything is okay.  Otherwise,
  dnl we have a problem.
  if test "X$cf_gdbm_basedir" != "X" ; then
    AC_MSG_RESULT(yes ($cf_gdbm_basedir))
    cf_enable_gdbm="yes"
  else
    AC_MSG_RESULT(not found.  Please check your path.)
    cf_enable_gdbm="no"
  fi
  unset cf_gdbm_basedir
else
  dnl If --disable-gdbm was specified
  AC_MSG_RESULT(disabled)
fi

if test "X$cf_enable_gdbm" != "Xno" ; then
  if test ! -z "$GDBM_INCLUDES"; then
    CXXFLAGS="$CXXFLAGS $GDBM_INCLUDES"
  fi
  if test ! -z "$GDBM_LIBS"; then
    LIBS="$LIBS $GDBM_LIBS"
  fi
  AC_DEFINE(HAVE_LIBGDBM, 1, [Define if using GDBM style DB.])
  GDBM_MSG="yes"
else
  GDBM_MSG="no"
fi

AC_MSG_CHECKING(for BSD style DB)
AC_TRY_COMPILE([#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <limits.h>
#include <db.h>],
[DB *foo = dbopen("foo.db", O_CREAT | O_RDWR, S_IRUSR | S_IWUSR, DB_HASH, NULL);],
AC_DEFINE(HAVE_BSDDB, 1, [Define if using BSD style DB.]) AC_MSG_RESULT(yes),
AC_MSG_RESULT(no))

AC_MSG_CHECKING(whether socklen_t is defined)
AC_TRY_COMPILE([#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>],
  [socklen_t foo = 0;], AC_MSG_RESULT(yes), AC_DEFINE(socklen_t, int,
  [Define as 'int' if the socklen_t type doesn't exist.])
  AC_MSG_RESULT(no))

AC_MSG_CHECKING(whether in_addr_t is defined)
AC_TRY_COMPILE([#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>],
  [in_addr_t foo = 0;], AC_MSG_RESULT(yes), AC_DEFINE(in_addr_t, unsigned int,
  [Define as 'unsigned int' if the in_addr_t type doesn't exist.])
  AC_MSG_RESULT(no))

AC_MSG_CHECKING(whether in_port_t is defined)
AC_TRY_COMPILE([#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>],
  [in_port_t foo = 0;], AC_MSG_RESULT(yes), AC_DEFINE(in_port_t, unsigned short,
  [Define as 'unsigned short' if the in_port_t type doesn't exist.])
  AC_MSG_RESULT(no))

if test x$ac_cv_header_sys_twg_config_h = xyes
then
  AC_DEFINE(WINS, 1, [define this if you are on svr3/twg])
fi

dnl
dnl check for pthreads
dnl
ACX_PTHREAD(
	[
		LIBS="${PTHREAD_LIBS} $LIBS"
		CXXFLAGS="$CXXFLAGS ${PTHREAD_CFLAGS}"
	], AC_MSG_ERROR([No pthreads? Uh-oh!]))

dnl
dnl check for hpux, and hpux version
dnl

AC_MSG_CHECKING(for hpux version)
if test -f /hp-ux; then
  AC_MSG_RESULT(yes)
  hpux=1
  uname=`uname -r` 2> /dev/null
  case $uname in
	A.09* | A.9* | a.9* | a.09* | 9* | 09*)
		;;
	A.08* | A.8* | a.8* | a.08* | 8* | 08*)
		AC_DEFINE(HPUX8, 1, [define this if you have hpux version 8])
		;;
	A.07* | A.B7* | A.7* | a.7* | a.07* | 7* | 07*)
		AC_DEFINE(HPUX7, 1, [define this if you have hpux version 7])
		;;
	*)
		AC_DEFINE(HPUXUNKNOWN, 1, [define this if you have an unknown hpux version (pre ver 7)])
		;;
  esac
else
  AC_MSG_RESULT(no)
fi

dnl
dnl do ultrix/posix stuff
dnl

AC_MSG_CHECKING(for ultrix)
AC_EGREP_CPP(yes,
[#if defined(ultrix) || defined(__ultrix) || defined(__ultrix)
  yes
#endif
], ultrix=1)

if test -n "$ultrix"; then
  AC_MSG_RESULT(yes)
  test -z "$GCC" && CC="$CC -YBSD"
else
  AC_MSG_RESULT(no)
  # POSIX termios is broken on Ultrix so don't look for it.
AC_MSG_CHECKING(for POSIX.1)
AC_EGREP_CPP(yes,
[#include <sys/types.h>
#include <unistd.h>
main () {
#ifdef _POSIX_VERSION
  yes
#endif
}
], AC_DEFINE(POSIX) AC_MSG_RESULT(yes); posix=1, AC_MSG_RESULT(no))
fi

dnl
dnl check for ptx
dnl

AC_MSG_CHECKING(for sequent/ptx)
AC_EGREP_CPP(yes,
[#ifdef _SEQUENT_
  yes
#endif
], LIBS="$LIBS -lseq" seqptx=1 AC_MSG_RESULT(yes), AC_MSG_RESULT(no))

dnl
dnl check for struct linger
dnl

AC_MSG_CHECKING(for struct linger)
AC_EGREP_HEADER([struct( |	)*linger], sys/socket.h, AC_MSG_RESULT(yes), AC_DEFINE(NO_STRUCT_LINGER, 1, [define this if you don't have struct linger]) AC_MSG_RESULT(no, ugh.))

dnl
dnl grok process groups
dnl

if test x$ac_cv_func_getsid != xyes && test x$ac_cv_func_getpgid != xyes
then
  AC_MSG_CHECKING(if getpgrp takes an argument)
  AC_TRY_RUN([
main()
{
  int pid;
  int pgid;

  pid = fork();

  if (0 == pid)
  {
#ifdef HAVE_SETSID
    setsid();
#else
    setpgrp(0, getpid());
#endif /* HAVE_SETSID */
    sleep(10);
  }
  else
  {
    sleep(2);
    pgid = getpgrp(pid);
    kill(pid,9);
    if (pid != pgid)
      exit(1);
  }
  exit(0);
}
],
  AC_MSG_RESULT(yes),
  AC_MSG_RESULT(no your getpgrp is painful)
  AC_DEFINE(BROKEN_GETPGRP, 1, [define this if your getpgrp() doesn't take a pid argument]), :)
fi

dnl
dnl work out wait type..
dnl

if test x$posix != x1
then
AC_MSG_CHECKING(for bsd wait)
AC_TRY_LINK([
#include <sys/types.h>
#include <sys/wait.h>
],[
  union wait x;
  int y;
#ifdef WEXITSTATUS
  y = WEXITSTATUS(x);
#endif
],
  AC_DEFINE(BSDWAIT, 1, [define this if you are using BSD wait union things])
  bsdwait=1
  AC_MSG_RESULT(yes),
  AC_MSG_RESULT(no)
  AC_CHECK_FUNC(waitpid,,
    AC_DEFINE(NEED_WAITPID, 1, [define this if waitpid() is unavailable])))
fi

dnl
dnl checking for select()
dnl

olibs="$LIBS"
AC_CHECK_FUNC(select, ,
  AC_CHECK_LIB(socket, select, LIBS="$LIBS -lsocket",
    AC_CHECK_LIB(nsl, select, LIBS="$LIBS -lnsl",
      AC_CHECK_LIB(inet, select, LIBS="$LIBS -linet",
        AC_CHECK_LIB(cposix, select, LIBS="$LIBS -lcposix",
          AC_CHECK_LIB(net, select, LIBS="$LIBS -lnet",
            AC_MSG_WARN(i can not find select.  you might need to help me)))))))

AC_LANG_SAVE
AC_LANG_C

dnl taken from ircd's Config script
AC_MSG_CHECKING(for non-blocking socket implementation)
AC_TRY_RUN(
[
#include <sys/types.h>
#include <sys/socket.h>
#include <fcntl.h>
#include <sys/ioctl.h>
#include <sys/file.h>
#include <signal.h>
alarmed()
{
	exit(1);
}
int main()
{
#if defined(O_NONBLOCK)
	char b[12], x[32];
	int f, l = sizeof(x);
	f = socket(AF_INET, SOCK_DGRAM, 0);
	if (f >= 0 && !(fcntl(f, F_SETFL, O_NONBLOCK))) {
		signal(SIGALRM, alarmed);
		alarm(5);
		recvfrom(f, b, 12, 0, (struct sockaddr *)x, &l);
		alarm(0);
		exit(0);
	}
#endif
	exit(1);
}
], AC_DEFINE(NBLOCK_POSIX, 1, [Define if you have posix non-blocking sockets (O_NONBLOCK)]) AC_MSG_RESULT(O_NONBLOCK),, AC_MSG_RESULT(unable to ttest))

AC_TRY_RUN(
[
#include <sys/types.h>
#include <sys/socket.h>
#include <fcntl.h>
#include <sys/ioctl.h>
#include <sys/file.h>
#include <signal.h>
alarmed()
{
	exit(1);
}
int main()
{
#if defined( O_NDELAY ) && !defined( NBLOCK_POSIX )
	char b[12], x[32];
	int f, l = sizeof(x);
	f = socket(AF_INET, SOCK_DGRAM, 0);
	if (f >= 0 && !(fcntl(f, F_SETFL, O_NDELAY))) {
		signal(SIGALRM, alarmed);
		alarm(3);
		recvfrom(f, b, 12, 0, (struct sockaddr *)x, &l);
		alarm(0);
		exit(0);
	}
#endif
	exit(1);
}
], AC_DEFINE(NBLOCK_BSD, 1, [Define if you have BSD non-blocking sockets (O_NDELAY)]) AC_MSG_RESULT( O_NDELAY ),, AC_MSG_RESULT(unable to test))

AC_TRY_RUN(
[
#include <sys/types.h>
#include <sys/socket.h>
#include <fcntl.h>
#include <sys/ioctl.h>
#include <sys/file.h>
#include <signal.h>
alarmed()
{
	exit(1);
}
int main()
{
#if !defined(NBLOCK_BSD) && !defined(NBLOCK_POSIX) && defined(FIONBIO)
	char b[12], x[32];
	int f, l = sizeof(x);
	f = socket(AF_INET, SOCK_DGRAM, 0);
	if (f >= 0 && !(fcntl(f, F_SETFL, FIONBIO))) {
		signal(SIGALRM, alarmed);
		alarm(3);
		recvfrom(f, b, 12, 0, (struct sockaddr *)x, &l);
		alarm(0);
		exit(0);
	}
#endif /* !NBLOCK_POSIX && !NBLOCK_BSD && FIONBIO */
	exit(1);
}
], AC_DEFINE(NBLOCK_SYSV, 1, [Define if you have SYSV non-blocking sockets (FIONBIO)]) AC_MSG_RESULT(FIONBIO),, AC_MSG_RESULT(unable to test))

AC_LANG_RESTORE

dnl
dnl signal handling
dnl

AC_CHECKING(signal implimentation)
AC_CHECK_FUNC(sigaction, AC_DEFINE(USE_SIGACTION, 1, [define this if you are using sigaction() instead of signal()])
  echo using posix signals
  ,
  AC_CHECK_FUNC(sigset, AC_DEFINE(USE_SIGSET, 1, [define this if you are using sigset() instead of signal()])
  echo using ok system v signals
  ,

echo checking for reliable signals
AC_TRY_RUN([
#include <sys/types.h>
#include <signal.h>

#ifndef SIGCHLD
# define SIGCHLD SIGCLD
#endif
#ifdef USE_SIGSET
# define signal sigset
#endif

int got;

#ifdef SIGVOID
void
#endif
hand()
{
  got++;
}

main()
{
  (void)signal(SIGCHLD, hand);
  kill(getpid(), SIGCHLD);
  kill(getpid(), SIGCHLD);
  if (got < 2)
    exit(1);
  exit(0);
}
], 
echo using bsd signals
, AC_DEFINE(SYSVSIGNALS, 1, [define this if you are using system V (unreliable) signals])
echo using system v signals, you lose.
)))

if test x$bsdwait = x1
then
  AC_MSG_CHECKING(for wait3 declaration)
  AC_EGREP_CPP([wait3( |	|\()],[#include <sys/types.h> dnl )
#include <signal.h>
#include <sys/wait.h>
], AC_DEFINE(WAIT3_DECLARED, 1, [define this if wait3() is declared]) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))
else
  AC_MSG_CHECKING(for waitpid declaration)
  AC_EGREP_CPP([waitpid( |	|\()],[#include <sys/types.h> dnl )
#include <signal.h>
#include <sys/wait.h>
], AC_DEFINE(WAITPID_DECLARED, 1, [define this if waitpid() is declared]) AC_MSG_RESULT(yes), AC_MSG_RESULT(no))
fi

dnl
dnl check for sys_errlist declaration
dnl

AC_MSG_CHECKING(for sys_errlist declaration)
AC_TRY_RUN([
#include <sys/types.h>
#include <stdio.h>
#include <errno.h>
main()
{
  char *s = sys_errlist[0];
  exit(0);
}
],
  AC_MSG_RESULT(yes)
  AC_DEFINE(SYS_ERRLIST_DECLARED, 1, [define this if your header files declare sys_errlist]),
  AC_MSG_RESULT(no), :)

dnl
dnl need this for dcc stuff
dnl

AC_MSG_CHECKING(for a 32 bit integer)
AC_TRY_RUN([
main()
{
  if (4 == sizeof(unsigned long))
    exit(0);
  exit(1);
}
],
  AC_MSG_RESULT(unsigned long)
  AC_DEFINE(UNSIGNED_LONG32, 1, [define this if an unsigned long is 32 bits]),
  AC_TRY_RUN([
main()
{
  if (4 == sizeof(unsigned int))
    exit(0);
  exit(1);
}
],
  AC_MSG_RESULT(unsigned int),
  AC_DEFINE(UNSIGNED_INT32, 1, [define this if an unsigned int is 32 bits]),
  AC_MSG_RESULT(none, using unsigned long)
  AC_DEFINE(UNKNOWN_32INT, 1, [define this if you are unsure what is is 32 bits])), :)

dnl
dnl libraries
dnl

dnl Make sure we have the GNU C++ library installed
dnl AC_CHECK_LIB(g++,main,,AC_MSG_ERROR(
dnl I can't find the GNU C++ libraries!  Install them first.
dnl ftp://ftp.gnu.org/gnu/libg++/))

dnl Standard C++ library
AC_CHECK_LIB(stdc++, main)

dnl encryption is a good thing
have_crypt=0
AC_CHECK_LIB(c, crypt, [have_crypt=1],
	AC_CHECK_LIB(crypt, crypt, [have_crypt=1; LIBS="-lcrypt $LIBS"],
		AC_CHECK_LIB(descrypt, crypt, [have_crypt=1; LIBS="-ldescrypt $LIBS"],
			AC_MSG_WARN(Bummer.  You're stuck with plaintext passwords.  Loser.)
		)
	)
)
if test "$have_crypt" = "1"; then
	AC_DEFINE(HAVE_CRYPT, 1, [define this if you have crypt(3)])
fi

dnl i think this was only needed for solaris with -lucb.
dnl AC_HAVE_LIBRARY(elf, LIBS="$LIBS -lelf",)
dnl AC_HAVE_LIBRARY(nls, libnls=1;AC_DEFINE(HAVE_LIB_NLS, 1, [define this if -lnls exists]),)
if test ! -n "$libsocket"; then
	AC_CHECK_LIB(socket, socket, LIBS="$LIBS -lsocket",)
fi
dnl this is for isc.  need the nsl_s library as well.
if test ! -n "$libinet"; then
	AC_CHECK_LIB(inet, socket, libnsl=1; LIBS="$LIBS -linet -lnsl_s",)
fi
if test ! -n "$libnsl"; then
	AC_CHECK_LIB(nsl, gethostname, LIBS="$LIBS -lnsl",)
fi
AC_CHECK_LIB(dgc, inet_addr, LIBS="$LIBS -ldgc",)
AC_CHECK_LIB(resolv, gethostbyname,
  olibs=$LIBS
  LIBS="-lresolv $LIBS"
  AC_TRY_RUN([
#include <netdb.h>
main()
{
  struct hostent *hp;

  hp = gethostbyname("foo");
  exit(0);
}
],,LIBS=$olibs, :))
dnl AC_HAVE_LIBRARY(PW, LIBS="$LIBS -lPW",)

dnl this is all stolen from perl-4.036's Configure.  larry is god.
echo "generating a list of signal names..."
set X `cat /usr/include/signal.h /usr/include/sys/signal.h 2>&1 | awk '
$1 ~ /^#define$/ && $2 ~ /^SIG[A-Z0-9]*$/ && $3 ~ /^[1-9][0-9]*$/ {
  [sig[$3] = substr($2,4,20)]
  if (max < $3 && $3 < 60) {
	max = $3
  }
}

END {
  for (i=1; i<=max; i++) {
    [if (sig[i] == "")]
      printf "%d", i
    else
      [printf "%s", sig[i]]
    if (i < max)
      printf " "
  }
  printf "\n"
}
'`
shift
case $# in
0)
  set X `kill -l 2> /dev/null`
  shift
  case $# in
  0) set HUP INT QUIT ILL TRAP IOT EMT FPE KILL BUS SEGV SYS PIPE ALRM TERM
    ;;
  esac
  ;;
esac
sig_name="ZERO $*"
if test -f sig.inc; then
  /bin/rm -f sig.inc
fi
[echo $sig_name | sed -e 's/$/"};/' -e 's/ /", "/g' -e 's/^/char *signals[] = { "/' >> sig.inc]

if test -z "$CFLAGS"; then CFLAGS=-O ; fi
if test -z "$LDFLAGS"; then LDFLAGS= ; fi
RM="rm -f"

if test -n "$nextstep"; then
  LIBS=`echo $LIBS | sed -e 's/-lposix/-lsys_s -lposix/'`
fi

if test -z "$LD" ; then
	LD=$CXX
fi
AC_SUBST(LD)

AC_SUBST(RM)
AC_OUTPUT(makefile)

A=`eval echo ${prefix}` ; A=`eval echo ${A}`
B=`eval echo ${bindir}` ; B=`eval echo ${B}`
C=`eval echo ${sbindir}` ; C=`eval echo ${C}`
D=`eval echo ${sysconfdir}` ; D=`eval echo ${D}`
E=`eval echo ${libexecdir}/ssh-askpass` ; E=`eval echo ${E}`
F=`eval echo ${mandir}/${mansubdir}X` ; F=`eval echo ${F}`
G=`eval echo ${piddir}` ; G=`eval echo ${G}`
H=`eval echo ${PRIVSEP_PATH}` ; H=`eval echo ${H}`
I=`eval echo ${user_path}` ; I=`eval echo ${I}`
J=`eval echo ${superuser_path}` ; J=`eval echo ${J}`
K=`eval echo ${localstatedir}/logs` ; K=`eval echo ${K}`

echo ""
echo "OOMon has been configured with the following options:"
echo ""
echo "                                    Binaries: $B"
echo "                         Configuration files: $D"
echo "                                   Log files: $K"
echo "  Perl-Compatible Regular Expressions (PCRE): ${PCRE_MSG}"
echo "                 GNU Database Manager (GDBM): ${GDBM_MSG}"
echo ""
echo "            Compiler: ${CXX}"
echo "      Compiler flags: ${CXXFLAGS}"
echo "        Linker flags: ${LDFLAGS}"
echo "           Libraries: ${LIBS}"

echo ""
